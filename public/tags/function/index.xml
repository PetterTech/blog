<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>function on PetterTech</title>
    <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/tags/function/</link>
    <description>Recent content in function on PetterTech</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 17 Sep 2014 07:16:57 +0000</lastBuildDate><atom:link href="https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/tags/function/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>PowerCLI: Function for listing snapshots</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/09/17/powercli-function-for-listing-snapshots/</link>
      <pubDate>Wed, 17 Sep 2014 07:16:57 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/09/17/powercli-function-for-listing-snapshots/</guid>
      <description>My very first PowerCLI related post was about this same topic: listing snapshot info using PowerCLI.
In my original post (which you can see here) I only wrote a pretty simple one-liner. Which was kind of okay, but it was missing one crucial thing: who took the snapshot?
Why vmware hasn’t found a way to include a username in the get-snapshot cmdlet is something I just can’t understand. There’s really not much code needed to add this to the output, and there’s several ways of doing so.</description>
    </item>
    
    <item>
      <title>PowerCLI: Listing VMs with ISOs mounted</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/09/09/powercli-listing-vms-with-isos-mounted/</link>
      <pubDate>Tue, 09 Sep 2014 05:55:24 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/09/09/powercli-listing-vms-with-isos-mounted/</guid>
      <description>For almost a year ago, I posted a simple one-liner to list all VMs who has ISOs mounted. You can view that post here: http://cloud.kemta.net/2013/10/powershell-vmware-list-all-vms-with-iso-mounted-and-dismount-them/
That post was written before I truly discovered the major advantages of using Get-View instead of Get-VM, Get-VMHost and so on. If used correctly, there’s a major difference in speed when using Get-View over Get-VM.
When writing this post I checked the differences in speed when using the old way that I linked to above and my new function (which I’ll get to in a second or two.</description>
    </item>
    
    <item>
      <title>PowerCLI: Getting vmhost uptime</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/09/08/powercli-getting-vmhost-uptime/</link>
      <pubDate>Mon, 08 Sep 2014 07:26:38 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/09/08/powercli-getting-vmhost-uptime/</guid>
      <description>I love a powershell challenge, and last week a colleague of mine asked me for assistance in getting the uptime of vmware hosts. My initial response did the trick:
However, I wasn’t completely satisfied by the the output or the ease of use.
So today I went back and rewrote the code and made a function of it.
Instead of using the ToString and Substring methods I went for the built-in class Math, which has a method called Round.</description>
    </item>
    
    <item>
      <title>PowerCLI: Getting the status of vmware tools on all VMs</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/09/05/powercli-getting-the-status-of-vmware-tools-on-all-vms/</link>
      <pubDate>Fri, 05 Sep 2014 12:06:17 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/09/05/powercli-getting-the-status-of-vmware-tools-on-all-vms/</guid>
      <description>I’m sure I don’t need to explain to you guys why VMware tools is a good idea to have installed on your VMs, and probably not why it’s a good idea to keep VMware tools updated.
However, I haven’t found a good way to get a neat list of which VMs need to have their VMware tools upgraded. While working on my vCenter health check script I found that I had to make my own little script to get that list.</description>
    </item>
    
    <item>
      <title>PowerCLI: Getting datastore alarms</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/08/31/powercli-getting-datastore-alarms/</link>
      <pubDate>Sun, 31 Aug 2014 10:16:36 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/08/31/powercli-getting-datastore-alarms/</guid>
      <description>Next in the series on getting alarms is getting datastore alarms.
Again, the code is pretty similar:
And the output is pretty similar:
The function code is this:</description>
    </item>
    
    <item>
      <title>PowerCLI: Getting cluster alarms</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/08/30/powercli-get-cluster-alarms/</link>
      <pubDate>Sat, 30 Aug 2014 08:21:59 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/08/30/powercli-get-cluster-alarms/</guid>
      <description>The next step in my short series on getting vCenter alarms using PowerCLI is to get cluster alarms.
Here’s the code:
And the output will look something like this:
As you can see, this will also list vm alarms and host alarms. So you could argue that you only need this and not separate scripts/functions for getting vm alarms and host alarms.
Anyways, here’s the function code:
The output will be the same, but since it’s a function you can manipulate the data further.</description>
    </item>
    
    <item>
      <title>PowerCLI: Getting host alarms</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/08/29/powercli-get-host-alarms/</link>
      <pubDate>Fri, 29 Aug 2014 07:41:13 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/08/29/powercli-get-host-alarms/</guid>
      <description>Yesterday I wrote a post about getting vm alarms through PowerCLI. Today it’s time for getting host alarms 🙂
The code is very similar to the one for getting vm alarms, since they both use get-view to grab all info:
The output will look something like this:
And here’s the function code:</description>
    </item>
    
    <item>
      <title>PowerCLI: Getting vm alarms</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/08/28/powercli-getting-vm-alarms/</link>
      <pubDate>Thu, 28 Aug 2014 06:42:12 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/08/28/powercli-getting-vm-alarms/</guid>
      <description>A few weeks ago I started to put together a health check script for our vmware environments and the first thing I wanted to have in that report is a list of triggered alarms. To my surprise there was no native cmdlet to retrieve alarms using PowerCLI, instead I had to write a short script to retrieve alarms.
So here’s the the script for retrieving vm alarms:
This will provide an output like this:</description>
    </item>
    
    <item>
      <title>Powershell: Measuring latency on DNS queries</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/08/15/powershell-measuring-latency-on-dns-queries/</link>
      <pubDate>Fri, 15 Aug 2014 08:39:40 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2014/08/15/powershell-measuring-latency-on-dns-queries/</guid>
      <description>A little while ago we have some issues with one of our Exchange environments. The symptoms was that basically everything was slow, opening address books, owa, sending mails and so on.
After some digging it occurred to me that this may be DNS related, so I used a one-liner in powershell to see how fast our DNS servers responded:
And sure enough, we were seeing response times in the range of 5-7 seconds.</description>
    </item>
    
    <item>
      <title>PowerCLI: Locate a MAC-address in vCenter</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2013/10/23/powercli-locate-a-mac-address-in-vcenter/</link>
      <pubDate>Wed, 23 Oct 2013 09:50:09 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2013/10/23/powercli-locate-a-mac-address-in-vcenter/</guid>
      <description>To find out to which vm a MAC address belongs, you can use a simple one-liner:
(Courtesy of this page: http://www.virtu-al.net/2009/07/07/powercli-more-one-liner-power/ )
Thats really great, and you can easily extend the one-liner to include more data if you like. But for someone who isn’t comfortable with using PowerCLI yet, it can seem a bit terrifying. Therefore I usually create functions for long one-liners like this one.
A basic function doing the same thing can look something like this:</description>
    </item>
    
    <item>
      <title>Powershell: Invoke-Sound function</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2013/04/18/powershell-invoke-sound-function/</link>
      <pubDate>Thu, 18 Apr 2013 09:26:09 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2013/04/18/powershell-invoke-sound-function/</guid>
      <description>I stumbled upon this brilliant powershell function for playing sounds using powershell, check it out: http://community.spiceworks.com/scripts/show/1337-powershell-function-invoke-sound
He even added a switch for playing the imperial march from Star Wars 🙂</description>
    </item>
    
    <item>
      <title>Powershell function for enabling a user for Lync and configure settings</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/10/04/powershell-function-for-enabling-a-user-for-lync-and-configure-settings/</link>
      <pubDate>Thu, 04 Oct 2012 12:07:10 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/10/04/powershell-function-for-enabling-a-user-for-lync-and-configure-settings/</guid>
      <description>A little while ago I posted a script for enabling users for Lync and settings some settings for that user. That script has been used here ever since I posted it and it has worked like a charm. However there’s always room for improvement, right?.
So I have made a function out of it and for the first time (I think) I have even implemented some error handling. The function is also improved quit a bit on the help section and the info that is shown to the user after the function completes.</description>
    </item>
    
    <item>
      <title>Powershell function for gathering users in groups</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/09/13/powershell-function-for-gathering-users-in-groups/</link>
      <pubDate>Thu, 13 Sep 2012 12:02:13 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/09/13/powershell-function-for-gathering-users-in-groups/</guid>
      <description>A friend of mine asked me a couple of days ago if I knew a way to gather users who are members of given groups. I thought to myself “Hmm, challenge accepted!” and started writing a small powershell script.
After he confirmed that the script worked as planned I decided to make a function of it (Yes, I know it has been a lot of them on this blog lately).</description>
    </item>
    
    <item>
      <title>Motivational Powershell function</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/09/12/motivational-powershell-function/</link>
      <pubDate>Wed, 12 Sep 2012 11:06:18 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/09/12/motivational-powershell-function/</guid>
      <description>If you are ever in need of some motivation, here is a very simple Powershell function for that:
Now all you need to do is write Motivate-Me in the powershell window to receive some inspirational words 🙂</description>
    </item>
    
    <item>
      <title>Powershell function for showing some system information</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/09/12/powershell-function-for-showing-some-system-information/</link>
      <pubDate>Wed, 12 Sep 2012 09:32:24 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/09/12/powershell-function-for-showing-some-system-information/</guid>
      <description>This is a function I created just because I wanted to toy around with Powershell and get-wmiobject. Also, this is my first function where I made it possible to use a switch parameter.
What the function does is gather some system information using get-wmiobject. The info is written to a temp file and then shown using out-gridview.
If the KeepTempFile parameter is used the temp file is saved in the users profile, if not it is deleted after the function finishes.</description>
    </item>
    
    <item>
      <title>Powershell function for rotating event logs</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/09/06/powershell-function-for-rotating-event-logs/</link>
      <pubDate>Thu, 06 Sep 2012 10:13:33 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/09/06/powershell-function-for-rotating-event-logs/</guid>
      <description>A friend of mine came to me with an interesting powershell challenge today: how can I use powershell to archive and clear event logs?
Well, challenge accepted!
The reason the challenge arose is due to maintenance he performs on a number of customer servers. Every month he saves each eventlog and clears it manually, a time consuming task if you have more than a few servers.
So here’s what I came up with:</description>
    </item>
    
    <item>
      <title>Function for locating an email address</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/08/28/function-for-locating-an-email-address/</link>
      <pubDate>Tue, 28 Aug 2012 10:41:15 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/08/28/function-for-locating-an-email-address/</guid>
      <description>Yesterday I was given a relatively easy task: find out who or what has a given email address.
As this was within our own Exchange organization it proved to be quite simple:
You can achieve the goal with a simple one-liner:
But wouldn’t it be easier to have it in a function? In Powershell, creating functions isn’t all that hard. Basically all you need to do is wrap the command or script block with a function statement, see here:</description>
    </item>
    
    <item>
      <title>Function for adding photo in Active Directory</title>
      <link>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/08/24/function-for-adding-photo-in-active-directory/</link>
      <pubDate>Fri, 24 Aug 2012 13:16:30 +0000</pubDate>
      
      <guid>https://blue-cliff-0fe9f2b03.3.azurestaticapps.net/index.php/2012/08/24/function-for-adding-photo-in-active-directory/</guid>
      <description>I have always been careful to avoid the really advanced and cool stuff in Powershell, like functions, arrays and such.
But as I created the last script it hit me that it would be really cool to have it in a command, like set-adphoto. After some googling I found that funtions aren’t hard at all!
Basically all I really had to do with the ad photo import script was to add “function Set-ADPhoto { ” in front of the script and end it with a }</description>
    </item>
    
  </channel>
</rss>
